<?php
/**
 * Copyright (c) 2016. Lorem ipsum dolor sit amet, consectetur adipiscing elit.
 * Morbi non lorem porttitor neque feugiat blandit. Ut vitae ipsum eget quam lacinia accumsan.
 * Etiam sed turpis ac ipsum condimentum fringilla. Maecenas magna.
 * Proin dapibus sapien vel ante. Aliquam erat volutpat. Pellentesque sagittis ligula eget metus.
 * Vestibulum commodo. Ut rhoncus gravida arcu.
 */

namespace Pyrex\CoreModelBundle\Repository;

use Doctrine\ORM\EntityManager;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Mapping;
use Psr\Log\LoggerInterface;
use Psr\Log\NullLogger;
use Symfony\Component\Validator\Exception\ValidatorException;
use Symfony\Component\Validator\Validator\ValidatorInterface;

/**
 * AbstractCoreRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
abstract class AbstractCoreRepository extends EntityRepository
{

    /** @var  ValidatorInterface */
    protected $validator;
    /** @var  LoggerInterface */
    protected $logger;

    /**
     * AbstractCoreRepository constructor.
     * @param EntityManager         $em
     * @param Mapping\ClassMetadata $class
     */
    public function __construct(EntityManager $em, Mapping\ClassMetadata $class)
    {
        parent::__construct($em, $class);
        $this->logger = new NullLogger();
    }


    /**
     * @param object $entity
     * @param bool   $check
     * @return bool
     */
    public function save($entity, $check = true)
    {
        $this->internalValidate($entity, $check);
        $new = $entity->getId();
        $this->_em->persist($entity);
        $this->_em->flush($entity);
        $this->logger->info(sprintf('#%d was %s', $entity->getId(), $new ? 'created' : 'saved'), (array) $entity);

        return  true;
    }

    /**
     * @param object $entity
     * @param bool   $check
     */
    public function merge($entity, $check = true)
    {
        $this->internalValidate($entity, $check);
        $this->_em->merge($entity);
        //$this->_em->persist($entity);
        $this->_em->flush();
        $this->logger->info(sprintf('#%d was %s', $entity->getId(), 'merged'), (array) $entity);
    }

    /**
     * @param ValidatorInterface $validation
     */
    public function setValidator(ValidatorInterface $validation)
    {
        $this->validator = $validation;
    }

    /**
     * @param LoggerInterface $logger
     */
    public function setLogger(LoggerInterface $logger)
    {
        $this->logger = $logger;
    }

    /**
     * @param $entity
     * @param $check
     */
    private function internalValidate($entity, $check)
    {
        $errors = $check ? $this->validator->validate($entity) : [];
        if (count($errors) > 0) {
            throw new ValidatorException((string) $errors);
        }
    }

}
