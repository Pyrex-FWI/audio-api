<?php

namespace Pyrex\CoreModelBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Pyrex\CoreModelBundle\Entity\Deejay;
use Pyrex\CoreModelBundle\Event\DeejayEventArgs;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * DeejayRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class DeejayRepository extends AbstractCoreRepository implements UserLoaderInterface
{
    /**
     * Loads the user for the given username.
     *
     * This method must return null if the user is not found.
     *
     * @param string $username The username
     *
     * @return UserInterface|null
     */
    public function loadUserByUsername($username)
    {
        return $this->createQueryBuilder('u')
            ->where('u.name = :name OR u.email = :email')
            ->setParameter('name', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param Deejay $deejay
     * @return bool
     */
    public function activate(Deejay $deejay)
    {
        if (!$deejay->getEnabled()) {
            $deejay->setEnabled(true);

            if ($this->save($deejay)) {
                $deejayEvent = new DeejayEventArgs($deejay);
                $this->getEntityManager()->getEventManager()->dispatchEvent('user_has_activated', $deejayEvent);
            }
        }
    }

    public function generateActivationToken(Deejay $deejay, \DateInterval $dateInterval = null)
    {
        if (!$dateInterval) {
            $dateInterval = new \DateInterval('PT01H');
        }

        $now = (new \DateTime())->add($dateInterval);

        $deejay->setActivationToken(bin2hex(random_bytes(15)));
        $deejay->setActivationTokenDate($now);
    }
}
